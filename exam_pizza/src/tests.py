# –ó–∞–ø—É—Å–∫ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ python3 -m pytest tests.py
# –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ coverage: python3 -m pytest tests.py --cov=click_for_pizza

import pytest
import random
from unittest.mock import patch  # –¥–ª—è –∑–∞–º–µ–Ω—ã —Ä–µ–∞–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ randint()
from click.testing import CliRunner  # –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è click
from pizza import Pepperoni, Hawaii, Margherita
from processes_with_pizza import bake, delivery, pickup
from click_for_pizza import menu, order


def test_dict():
    """–¢–µ—Å—Ç –º–µ—Ç–æ–¥–∞ dict(self), –≤–æ–∑–≤—Ä–∞—â–∞—é—â–µ–≥–æ —Å–ª–æ–≤–∞—Ä—å —Ä–µ—Ü–µ–ø—Ç–∞."""
    excepted = {
        "ü•ü dough": 500,
        "üßÄ cheese": 125,
        "ü•§ water": 125,
        "üçÖ tomato sauce": 50,
        "üßÇ salt": 20,
        "üçñ sausage": 200,
        "üå∂ hot pepper": 20,
        "üßÖ onion": 20,
    }

    assert Pepperoni(size="L").dict() == excepted


def test_size():
    """–¢–µ—Å—Ç —Ç–æ–≥–æ, —á—Ç–æ —É –¥–ª—è XL –ø–∏—Ü—Ü –≤—Å–µ—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –≤ –ø–æ–ª—Ç–æ—Ä–∞ —Ä–∞–∑–∞ –±–æ–ª—å—à–µ."""
    hawaii_l_dict = Hawaii(size="L").dict()
    hawaii_xl_dict = Hawaii(size="XL").dict()
    for key in hawaii_l_dict:
        assert hawaii_xl_dict[key] == int(1.5 * hawaii_l_dict[key])


def test_str():
    """–¢–µ—Å—Ç –º–µ—Ç–æ–¥–∞ str –¥–ª—è —Ä–µ—Ü–µ–ø—Ç–∞ –ø–∏—Ü—Ü."""
    excepted = (
        "Pepperoniüçï XL : ü•ü dough: 750–≥, üßÄ cheese: 187–≥, ü•§ water: "
        "187–≥, üçÖ tomato sauce: 75–≥, üßÇ salt: 30–≥, üçñ sausage: 300–≥, "
        "üå∂ hot pepper: 30–≥, üßÖ onion: 30–≥"
    )
    assert str(Pepperoni(size="XL")) == excepted


def test_eql():
    """–¢–µ—Å—Ç –º–µ—Ç–æ–¥–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø–∏—Ü—Ü —Å –ø–æ–º–æ—â—å—é —Ä–∞–≤–µ–Ω—Å—Ç–≤–∞."""
    margherita_l1 = Margherita(size="L")
    margherita_l2 = Margherita(size="L")
    margherita_xl = Margherita(size="XL")
    pepperoni_xl = Pepperoni(size="XL")
    assert (
        margherita_l1 == margherita_l2
        and margherita_l1 != margherita_xl
        and margherita_xl != pepperoni_xl
    )


def test_orig_bake():
    """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ bake, –±–µ–∑ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞."""
    original_bake = bake.__wrapped__
    assert original_bake(Hawaii(size="XL")) == "üç∫ –ü—Ä–∏–≥–æ—Ç–æ–≤–∏–ª–∏"


def test_orig_delivery():
    """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ delivery, –±–µ–∑ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞."""
    original_delivery = delivery.__wrapped__
    assert original_delivery(Margherita(size="XL")) == "üõµ –î–æ—Å—Ç–∞–≤–∏–ª–∏"


def test_orig_pickup():
    """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ pickup, –±–µ–∑ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞."""
    original_pickup = pickup.__wrapped__
    assert original_pickup(Pepperoni(size="XL")) == "üè° –ó–∞–±—Ä–∞–ª–∏"


def test_deco_bake_l():
    """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ bake –¥–ª—è –ø–∏—Ü—Ü—ã —Ä–∞–∑–º–µ—Ä–∞ L, –ø–æ—Å–ª–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞."""
    my_randint = 7
    # –í—ã–∑—ã–≤–∞–µ–º randint() –∏–∑ random, –∑–∞–º–µ–Ω–∏–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ my_randint
    with patch.object(random, "randint", return_value=my_randint):
        assert (
            bake(Pepperoni(size="L"))
            == "üç∫ –ü—Ä–∏–≥–æ—Ç–æ–≤–∏–ª–∏ Pepperoniüçï L –∑–∞ ‚åö 7–º–∏–Ω!"
        )


def test_deco_bake_xl():
    """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ bake –¥–ª—è –ø–∏—Ü—Ü—ã —Ä–∞–∑–º–µ—Ä–∞ XL, –ø–æ—Å–ª–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞."""
    my_randint = 7
    # –í—ã–∑—ã–≤–∞–µ–º randint() –∏–∑ random, –∑–∞–º–µ–Ω–∏–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ my_randint
    with patch.object(random, "randint", return_value=my_randint):
        assert (
            bake(Pepperoni(size="XL"))
            == "üç∫ –ü—Ä–∏–≥–æ—Ç–æ–≤–∏–ª–∏ Pepperoniüçï XL –∑–∞ ‚åö 14–º–∏–Ω!"
        )


def test_deco_delivery():
    """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ delivery, –ø–æ—Å–ª–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞."""
    my_randint = 10
    # –í—ã–∑—ã–≤–∞–µ–º randint() –∏–∑ random, –∑–∞–º–µ–Ω–∏–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ my_randint
    with patch.object(random, "randint", return_value=my_randint):
        assert (
            delivery(Margherita(size="L"))
            == "üõµ –î–æ—Å—Ç–∞–≤–∏–ª–∏ MargheritaüßÄ L –∑–∞ ‚åö 10–º–∏–Ω!"
        )


def test_deco_pickup():
    """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ pickup, –ø–æ—Å–ª–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞."""
    my_randint = 9
    # –í—ã–∑—ã–≤–∞–µ–º randint() –∏–∑ random, –∑–∞–º–µ–Ω–∏–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ my_randint
    with patch.object(random, "randint", return_value=my_randint):
        assert pickup(Hawaii(size="XL")) == "üè° –ó–∞–±—Ä–∞–ª–∏ Hawaiiüçç XL –∑–∞ ‚åö 9–º–∏–Ω!"


def test_menu():
    """–¢–µ—Å—Ç –≤—ã–≤–æ–¥–∞ üòã –º–µ–Ω—é –ø–∏—Ü—Ü–µ—Ä–∏–∏."""
    runner = CliRunner()
    result = runner.invoke(menu)
    assert result.exit_code == 0
    actual = result.output
    assert (
        "üòã –ù–∞—à–µ –º–µ–Ω—é üòã" in actual
        and "-Pepperoniüçï L" in actual
        and "-MargheritaüßÄ XL" in actual
    )


def test_order_delivery():
    """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ order - –≤—ã–≤–æ–¥–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞
    –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –∏ üõµ –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–∏—Ü—Ü—ã."""
    runner = CliRunner()
    my_randint = 5
    # –í—ã–∑—ã–≤–∞–µ–º randint() –∏–∑ random, –∑–∞–º–µ–Ω–∏–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ my_randint
    with patch.object(random, "randint", return_value=my_randint):
        result = runner.invoke(order, ["pepperoni", "l", "--delivery"])
        assert result.exit_code == 0
        actual = result.output
        excepted = (
            "üç∫ –ü—Ä–∏–≥–æ—Ç–æ–≤–∏–ª–∏ Pepperoniüçï L –∑–∞ ‚åö 5–º–∏–Ω!\n"
            "üõµ –î–æ—Å—Ç–∞–≤–∏–ª–∏ Pepperoniüçï L –∑–∞ ‚åö 5–º–∏–Ω!\n"
        )
        assert actual == excepted


def test_order_pickup():
    """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ order - –≤—ã–≤–æ–¥–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞
    –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –∏ üè° —Å–∞–º–æ–≤—ã–≤–æ–∑–∞ –ø–∏—Ü—Ü—ã."""
    runner = CliRunner()
    my_randint = 7
    # –í—ã–∑—ã–≤–∞–µ–º randint() –∏–∑ random, –∑–∞–º–µ–Ω–∏–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ my_randint
    with patch.object(random, "randint", return_value=my_randint):
        result = runner.invoke(order, ["hawaii", "xl"])
        assert result.exit_code == 0
        actual = result.output
        excepted = (
            "üç∫ –ü—Ä–∏–≥–æ—Ç–æ–≤–∏–ª–∏ Hawaiiüçç XL –∑–∞ ‚åö 14–º–∏–Ω!\n"
            "üè° –ó–∞–±—Ä–∞–ª–∏ Hawaiiüçç XL –∑–∞ ‚åö 7–º–∏–Ω!\n"
        )
        assert actual == excepted
